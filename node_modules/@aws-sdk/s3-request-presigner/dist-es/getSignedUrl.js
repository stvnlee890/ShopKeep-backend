import { __assign, __awaiter, __generator } from "tslib";
import { HttpRequest } from "@aws-sdk/protocol-http";
import { formatUrl } from "@aws-sdk/util-format-url";
import { S3RequestPresigner } from "./presigner";
export var getSignedUrl = function (client, command, options) {
    if (options === void 0) { options = {}; }
    return __awaiter(void 0, void 0, void 0, function () {
        var s3Presigner, presignInterceptMiddleware, middlewareName, clientStack, handler, output, presigned;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    s3Presigner = new S3RequestPresigner(__assign({}, client.config));
                    presignInterceptMiddleware = function (next, context) { return function (args) { return __awaiter(void 0, void 0, void 0, function () {
                        var request, presigned;
                        var _a, _b;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0:
                                    request = args.request;
                                    if (!HttpRequest.isInstance(request)) {
                                        throw new Error("Request to be presigned is not an valid HTTP request.");
                                    }
                                    delete request.headers["amz-sdk-invocation-id"];
                                    delete request.headers["amz-sdk-request"];
                                    delete request.headers["x-amz-user-agent"];
                                    return [4, s3Presigner.presign(request, __assign(__assign({}, options), { signingRegion: (_a = options.signingRegion) !== null && _a !== void 0 ? _a : context["signing_region"], signingService: (_b = options.signingService) !== null && _b !== void 0 ? _b : context["signing_service"] }))];
                                case 1:
                                    presigned = _c.sent();
                                    return [2, {
                                            response: {},
                                            output: {
                                                $metadata: { httpStatusCode: 200 },
                                                presigned: presigned,
                                            },
                                        }];
                            }
                        });
                    }); }; };
                    middlewareName = "presignInterceptMiddleware";
                    clientStack = client.middlewareStack.clone();
                    clientStack.addRelativeTo(presignInterceptMiddleware, {
                        name: middlewareName,
                        relation: "before",
                        toMiddleware: "awsAuthMiddleware",
                        override: true,
                    });
                    handler = command.resolveMiddleware(clientStack, client.config, {});
                    return [4, handler({ input: command.input })];
                case 1:
                    output = (_a.sent()).output;
                    presigned = output.presigned;
                    return [2, formatUrl(presigned)];
            }
        });
    });
};
